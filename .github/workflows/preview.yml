name: "Preview"

on:
  pull_request:
    types: [opened, synchronize, closed, labeled, unlabeled]
    branches:
      - main
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      demo_type:
        description: 'Demo type to generate'
        required: true
        default: 'both'
        type: choice
        options:
        - local
        - s3
        - both
      pr_number:
        description: 'PR number (for manual S3 demo generation)'
        required: false
        type: string
      custom_demos:
        description: 'Custom demo arguments (optional, e.g., "--theme nord --title My Demo")'
        required: false
        type: string
      build_type:
        description: 'Build type to generate'
        required: false
        default: 'demo'
        type: choice
        options:
        - demo
        - dev-build
        - both

jobs:
  # Test job to verify issue_comment trigger works
  comment-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment'
    steps:
      - name: Test comment trigger
        run: |
          echo "✅ Issue comment trigger is working!"
          echo "  Author: ${{ github.event.comment.user.login }}"
          echo "  Comment: ${{ github.event.comment.body }}"
          echo "  Is PR: ${{ github.event.issue.pull_request != null }}"

  # Security check - only allow authorized users
  security-check:
    runs-on: ubuntu-latest
    # Only run for PR comments with commands or PR closure - NOT regular PR pushes
    if: >
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request != null &&
       (startsWith(github.event.comment.body, '/demo') ||
        startsWith(github.event.comment.body, '/build'))) ||
      (github.event_name == 'pull_request' && github.event.action == 'closed')
    environment: preview-pr  # Protected environment requiring approval
    outputs:
      authorized: ${{ steps.check.outputs.authorized }}
      should_generate: ${{ steps.check.outputs.should_generate }}
      should_cleanup: ${{ steps.check.outputs.should_cleanup }}
      should_build: ${{ steps.check.outputs.should_build }}
      should_build_cleanup: ${{ steps.check.outputs.should_build_cleanup }}
      custom_args: ${{ steps.check.outputs.custom_args }}
      demo_variant: ${{ steps.check.outputs.demo_variant }}
    steps:
      - name: Debug trigger event
        run: |
          echo "🚨 Security-check job triggered!"
          echo "  Event: ${{ github.event_name }}"
          echo "  Action: ${{ github.event.action || 'N/A' }}"
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "  Comment author: ${{ github.event.comment.user.login }}"
            echo "  Comment body: ${{ github.event.comment.body }}"
            echo "  Is PR comment: ${{ github.event.issue.pull_request != null }}"
          fi

      - name: Check authorization and trigger conditions
        id: check
        run: |
          # Authorization is handled by the protected environment 'preview-pr'
          echo "authorized=true" >> $GITHUB_OUTPUT
          echo "✅ Demo generation approved by repository maintainer"

          # Initialize variables
          should_generate=false
          should_cleanup=false
          should_build=false
          should_build_cleanup=false
          custom_args=""
          demo_variant=""

          echo "Event: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action || 'N/A' }}"

          # Handle issue comments (PR comments)
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "Processing issue comment..."
            comment_body="${{ github.event.comment.body }}"
            echo "Comment: $comment_body"

            if [[ "$comment_body" == "/demo" ]]; then
              should_generate=true
              demo_variant="themes"
              echo "✅ Matched /demo command"
            elif echo "$comment_body" | grep -q '^/demo[[:space:]]\+--args[[:space:]]\+".*"$'; then
              should_generate=true
              demo_variant="custom"
              custom_args=$(echo "$comment_body" | sed -n 's|^/demo[[:space:]]\+--args[[:space:]]\+"\([^"]*\)"$|\1|p')
              echo "✅ Matched /demo --args command with: $custom_args"
            elif [[ "$comment_body" == "/demo cleanup" ]]; then
              should_cleanup=true
              echo "✅ Matched /demo cleanup command"
            elif [[ "$comment_body" == "/build" ]]; then
              should_build=true
              echo "✅ Matched /build command"
            else
              echo "❌ No matching command found"
            fi
          fi

          # Handle workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            should_generate=true
            demo_variant="manual"
            echo "✅ Manual workflow dispatch"
          fi

          # Handle PR events
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.event.action }}" == "closed" ]]; then
              should_cleanup=true
              echo "✅ PR closed - cleanup triggered"
            fi
          fi

          # Set outputs
          echo "should_generate=$should_generate" >> $GITHUB_OUTPUT
          echo "should_cleanup=$should_cleanup" >> $GITHUB_OUTPUT
          echo "should_build=$should_build" >> $GITHUB_OUTPUT
          echo "should_build_cleanup=$should_build_cleanup" >> $GITHUB_OUTPUT
          echo "custom_args=$custom_args" >> $GITHUB_OUTPUT
          echo "demo_variant=$demo_variant" >> $GITHUB_OUTPUT

          echo "Final outputs:"
          echo "  Should generate: $should_generate"
          echo "  Should cleanup: $should_cleanup"
          echo "  Demo variant: $demo_variant"
          echo "  Custom args: $custom_args"

      - name: Debug - Show all outputs being set
        run: |
          echo "🔍 All job outputs being set:"
          echo "  authorized=${{ steps.check.outputs.authorized }}"
          echo "  should_generate=${{ steps.check.outputs.should_generate }}"
          echo "  should_cleanup=${{ steps.check.outputs.should_cleanup }}"
          echo "  should_build=${{ steps.check.outputs.should_build }}"
          echo "  should_build_cleanup=${{ steps.check.outputs.should_build_cleanup }}"
          echo "  custom_args=${{ steps.check.outputs.custom_args }}"
          echo "  demo_variant=${{ steps.check.outputs.demo_variant }}"

  # Generate demo
  generate:
    runs-on: ubuntu-latest
    needs: security-check
    if: |
      always() &&
      needs.security-check.outputs.authorized == 'true' &&
      needs.security-check.outputs.should_generate == 'true'
    permissions:
      contents: read
      pull-requests: write
      issues: write
    env:
      GOTOOLCHAIN: auto

    steps:
      - name: Debug workflow conditions
        run: |
          echo "🔍 Debug Information:"
          echo "  Event: ${{ github.event_name }}"
          echo "  Action: ${{ github.event.action || 'N/A' }}"
          echo "  Authorized: ${{ needs.security-check.outputs.authorized }}"
          echo "  Should Generate: ${{ needs.security-check.outputs.should_generate }}"
          echo "  Should Cleanup: ${{ needs.security-check.outputs.should_cleanup }}"
          echo "  Demo Variant: ${{ needs.security-check.outputs.demo_variant }}"
          echo "  Custom Args: ${{ needs.security-check.outputs.custom_args }}"
          echo ""
          echo "🎯 This job should run when:"
          echo "  - authorized == 'true' (current: ${{ needs.security-check.outputs.authorized }})"
          echo "  - should_generate == 'true' (current: ${{ needs.security-check.outputs.should_generate }})"

      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          check-latest: true

      - name: Build web-indexer
        run: go build -o web-indexer .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Determine demo parameters
        id: params
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            DEMO_TYPE="${{ github.event.inputs.demo_type }}"
            if [[ -n "${{ github.event.inputs.pr_number }}" ]]; then
              PR_NUMBER="${{ github.event.inputs.pr_number }}"
              BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"
            else
              BUCKET_NAME="joshbeard-web-indexer-demo-manual-$(date +%s)"
            fi
          else
            DEMO_TYPE="s3"  # Only S3 demos for PR triggers
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              PR_NUMBER="${{ github.event.number }}"
            elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
              PR_NUMBER="${{ github.event.issue.number }}"
            fi
            BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"
          fi

          echo "demo_type=$DEMO_TYPE" >> $GITHUB_OUTPUT
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

          echo "📋 Demo parameters:"
          echo "  Type: $DEMO_TYPE"
          echo "  Bucket: $BUCKET_NAME"
          echo "  PR: $PR_NUMBER"

      - name: Generate demo
        env:
          DEMO_S3_BUCKET: ${{ steps.params.outputs.bucket_name }}
        run: |
          echo "🚀 Generating demo..."
          echo "  Type: ${{ steps.params.outputs.demo_type }}"
          echo "  Bucket: $DEMO_S3_BUCKET"
          echo "  Variant: ${{ needs.security-check.outputs.demo_variant }}"
          echo "  Custom args: ${{ needs.security-check.outputs.custom_args }}"

          # Determine demo generation approach
          DEMO_VARIANT="${{ needs.security-check.outputs.demo_variant }}"
          CUSTOM_ARGS="${{ needs.security-check.outputs.custom_args }}"

          # Check for custom demos from workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.custom_demos }}" ]]; then
            CUSTOM_ARGS="${{ github.event.inputs.custom_demos }}"
            DEMO_VARIANT="custom"
            echo "  Using custom demos from workflow dispatch: $CUSTOM_ARGS"
          fi

          cd demo

          if [[ "$DEMO_VARIANT" == "custom" && -n "$CUSTOM_ARGS" ]]; then
            echo "🎯 Generating config-based demos PLUS custom demo with args: $CUSTOM_ARGS"
            make demo-s3 CUSTOM_DEMOS="$CUSTOM_ARGS"
          else
            echo "🎯 Generating all config-based demos (themes)"
            make demo-s3
          fi

      - name: Get S3 website URL
        id: s3_url
        if: contains(steps.params.outputs.demo_type, 's3')
        run: |
          BUCKET_NAME="${{ steps.params.outputs.bucket_name }}"
          S3_URL="http://${BUCKET_NAME}.s3-website-us-east-1.amazonaws.com/"
          echo "s3_url=$S3_URL" >> $GITHUB_OUTPUT
          echo "🌐 S3 Website URL: $S3_URL"

      - name: Upload demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-indexer-demo-pr${{ steps.params.outputs.pr_number || 'manual' }}
          path: demo/output/
          retention-days: 30

      - name: Comment on PR with demo links
        if: steps.params.outputs.pr_number
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.params.outputs.pr_number }};
            const bucketName = "${{ steps.params.outputs.bucket_name }}";
            const s3Url = "${{ steps.s3_url.outputs.s3_url }}";
            const demoType = "${{ steps.params.outputs.demo_type }}";
            const demoVariant = "${{ needs.security-check.outputs.demo_variant }}";
            const customArgs = "${{ needs.security-check.outputs.custom_args }}";

            let comment = `## 🗂️ Web-Indexer Preview

            A live demo has been generated for this pull request:`;

            if (demoType.includes('s3')) {
              comment += `
            **🌐 [Preview on S3](${s3Url})**
            `;
            }

            if (demoType.includes('local') || demoType === 'both') {
              comment += `
            ### 📁 Local Preview
            - Download the workflow artifacts to view locally
            `;
            }

            // Add demo configuration info
            comment += `
            ### 🎯 Demo Configuration`;

            if (demoVariant === 'custom' && customArgs) {
              comment += `
            - **Type**: Custom demo (additional)
            - **Arguments**: \`${customArgs}\`
            - **Generated with**: \`web-indexer ${customArgs}\`
            - **Note**: This is generated *in addition* to all config-based theme demos
            `;
            } else {
              comment += `
            - **Type**: All themes showcase
            - **Themes**: Default, Solarized, Nord, Dracula
            - **Features**: Recursive indexing, responsive design, dark mode
            `;
            }

            comment += `
            ### 🧪 Available Commands
            - \`/demo\` - Generate all themes demo
            - \`/demo --args "custom arguments"\` - Generate custom demo *in addition* to themes
            - \`/demo cleanup\` - Clean up resources

            ### 📖 Example Custom Commands
            - \`/demo --args "--theme nord --title 'My Custom Index'"\`
            - \`/demo --args "--theme dracula --minify --sort-by last_modified"\`

            ---
            *Preview will be automatically cleaned up when this PR is closed*`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Cleanup demo resources
  cleanup:
    runs-on: ubuntu-latest
    needs: security-check
    if: |
      always() &&
      needs.security-check.outputs.authorized == 'true' &&
      needs.security-check.outputs.should_cleanup == 'true'
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Determine PR number
        id: pr_info
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER="${{ github.event.number }}"
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            PR_NUMBER="${{ github.event.issue.number }}"
          fi

          BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT

          echo "🧹 Cleanup parameters:"
          echo "  PR: $PR_NUMBER"
          echo "  Bucket: $BUCKET_NAME"

      - name: Cleanup S3 demo resources
        id: cleanup_result
        run: |
          BUCKET_NAME="${{ steps.pr_info.outputs.bucket_name }}"
          echo "🧹 Cleaning up S3 bucket: $BUCKET_NAME"

          # Check if bucket exists
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "✅ Bucket exists, proceeding with cleanup..."

            # Delete all objects in the bucket
            echo "🗑️ Deleting all objects..."
            aws s3 rm "s3://$BUCKET_NAME" --recursive 2>/dev/null || true

            # Delete the bucket
            echo "🗑️ Deleting bucket..."
            aws s3 rb "s3://$BUCKET_NAME" 2>/dev/null || true

            echo "cleanup_performed=true" >> $GITHUB_OUTPUT
            echo "✅ Cleanup completed successfully"
          else
            echo "ℹ️ Bucket $BUCKET_NAME does not exist or was already cleaned up"
            echo "cleanup_performed=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR about cleanup
        if: steps.pr_info.outputs.pr_number && steps.cleanup_result.outputs.cleanup_performed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr_info.outputs.pr_number }};
            const bucketName = "${{ steps.pr_info.outputs.bucket_name }}";

            const comment = `## 🧹 Cleanup Complete

            Resources for this PR have been cleaned up:
            - ✅ Demo S3 bucket removed

            ---
            *Resources cleaned up automatically*`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Manual demo generation (for testing)
  manual-generate:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: preview-pr  # Use protected environment for AWS credentials
    permissions:
      contents: read
      pull-requests: write
      issues: write
    env:
      GOTOOLCHAIN: auto

    steps:
      - name: Debug manual trigger
        run: |
          echo "🔍 Manual workflow dispatch triggered:"
          echo "  Demo type: ${{ github.event.inputs.demo_type }}"
          echo "  PR number: ${{ github.event.inputs.pr_number }}"
          echo "  Custom demos: ${{ github.event.inputs.custom_demos }}"
          echo "  Build type: ${{ github.event.inputs.build_type }}"

      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          check-latest: true

      - name: Build web-indexer
        run: go build -o web-indexer .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Generate manual demo
        run: |
          echo "🚀 Generating manual demo..."
          cd demo
          make demo-s3