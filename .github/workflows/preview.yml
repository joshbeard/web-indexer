name: "Preview"

on:
  pull_request:
    types: [opened, synchronize, closed, labeled, unlabeled]
    branches:
      - main
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      demo_type:
        description: 'Demo type to generate'
        required: true
        default: 'both'
        type: choice
        options:
        - local
        - s3
        - both
      pr_number:
        description: 'PR number (for manual S3 demo generation)'
        required: false
        type: string
      build_type:
        description: 'Build type to generate'
        required: false
        default: 'demo'
        type: choice
        options:
        - demo
        - dev-build
        - both

jobs:
  # Security check - only allow authorized users
  security-check:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' &&
       ((github.event.action == 'labeled' && (github.event.label.name == 'demo' || github.event.label.name == 'dev-build')) ||
        (github.event.action == 'unlabeled' && (github.event.label.name == 'demo' || github.event.label.name == 'dev-build')) ||
        (github.event.action == 'closed'))) ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request != null &&
       (startsWith(github.event.comment.body, '/demo') || startsWith(github.event.comment.body, '/build')))
    outputs:
      authorized: ${{ steps.check.outputs.authorized }}
      should_generate: ${{ steps.check.outputs.should_generate }}
      should_cleanup: ${{ steps.check.outputs.should_cleanup }}
      should_build: ${{ steps.check.outputs.should_build }}
      should_build_cleanup: ${{ steps.check.outputs.should_build_cleanup }}
    steps:
      - name: Check authorization and trigger conditions
        id: check
        run: |
          # Define authorized users (repository owner and collaborators)
          AUTHORIZED_USERS="joshbeard"  # Add more users separated by spaces

          # Check if user is authorized
          if echo "$AUTHORIZED_USERS" | grep -q "${{ github.actor }}"; then
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "authorized=false" >> $GITHUB_OUTPUT
            echo "❌ User ${{ github.actor }} is not authorized to generate demos"
            exit 0
          fi

          # Check trigger conditions
          should_generate=false
          should_cleanup=false
          should_build=false
          should_build_cleanup=false

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Check for demo label or if PR is opened/synchronized
            if [[ "${{ github.event.action }}" == "labeled" && "${{ github.event.label.name }}" == "demo" ]]; then
              should_generate=true
            elif [[ "${{ github.event.action }}" == "unlabeled" && "${{ github.event.label.name }}" == "demo" ]]; then
              should_cleanup=true
            elif [[ "${{ github.event.action }}" == "labeled" && "${{ github.event.label.name }}" == "dev-build" ]]; then
              should_build=true
            elif [[ "${{ github.event.action }}" == "unlabeled" && "${{ github.event.label.name }}" == "dev-build" ]]; then
              should_build_cleanup=true
            elif [[ "${{ github.event.action }}" == "closed" ]]; then
              should_cleanup=true
              should_build_cleanup=true
            fi
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            # Check for demo commands in comments (only on pull requests)
            echo "🔍 Processing issue_comment event:"
            echo "  Issue type: ${{ github.event.issue.pull_request && 'pull_request' || 'issue' }}"
            echo "  Comment body: '${{ github.event.comment.body }}'"

            if [[ "${{ github.event.issue.pull_request }}" != "null" ]]; then
              comment_body="${{ github.event.comment.body }}"
              if [[ "$comment_body" =~ ^/demo[[:space:]]*$ ]]; then
                should_generate=true
                echo "  ✅ Matched /demo command"
              elif [[ "$comment_body" =~ ^/demo[[:space:]]+cleanup[[:space:]]*$ ]]; then
                should_cleanup=true
                echo "  ✅ Matched /demo cleanup command"
              elif [[ "$comment_body" =~ ^/build[[:space:]]*$ ]]; then
                should_build=true
                echo "  ✅ Matched /build command"
              elif [[ "$comment_body" =~ ^/build[[:space:]]+cleanup[[:space:]]*$ ]]; then
                should_build_cleanup=true
                echo "  ✅ Matched /build cleanup command"
              else
                echo "  ❌ No matching demo/build command found"
              fi
            else
              echo "  ❌ Comment is on an issue, not a pull request"
            fi
          fi

          echo "should_generate=$should_generate" >> $GITHUB_OUTPUT
          echo "should_cleanup=$should_cleanup" >> $GITHUB_OUTPUT
          echo "should_build=$should_build" >> $GITHUB_OUTPUT
          echo "should_build_cleanup=$should_build_cleanup" >> $GITHUB_OUTPUT

          echo "🔍 Authorization check:"
          echo "  User: ${{ github.actor }}"
          echo "  Authorized: $(echo "$AUTHORIZED_USERS" | grep -q "${{ github.actor }}" && echo "✅ Yes" || echo "❌ No")"
          echo "  Should generate: $should_generate"
          echo "  Should cleanup: $should_cleanup"
          echo "  Should build: $should_build"
          echo "  Should build cleanup: $should_build_cleanup"

  # Generate demo
  generate:
    runs-on: ubuntu-latest
    needs: security-check
    if: |
      always() &&
      ((needs.security-check.outputs.authorized == 'true' && needs.security-check.outputs.should_generate == 'true') ||
      github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      pull-requests: write
      issues: write
    env:
      GOTOOLCHAIN: auto

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          check-latest: true

      - name: Build web-indexer
        run: go build -o web-indexer .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Determine demo parameters
        id: params
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            DEMO_TYPE="${{ github.event.inputs.demo_type }}"
            if [[ -n "${{ github.event.inputs.pr_number }}" ]]; then
              PR_NUMBER="${{ github.event.inputs.pr_number }}"
              BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"
            else
              BUCKET_NAME="joshbeard-web-indexer-demo-manual-$(date +%s)"
            fi
          else
            DEMO_TYPE="s3"  # Only S3 demos for PR triggers
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              PR_NUMBER="${{ github.event.number }}"
            elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
              PR_NUMBER="${{ github.event.issue.number }}"
            fi
            BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"
          fi

          echo "demo_type=$DEMO_TYPE" >> $GITHUB_OUTPUT
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

          echo "📋 Demo parameters:"
          echo "  Type: $DEMO_TYPE"
          echo "  Bucket: $BUCKET_NAME"
          echo "  PR: $PR_NUMBER"

      - name: Generate demo
        env:
          DEMO_S3_BUCKET: ${{ steps.params.outputs.bucket_name }}
        run: |
          echo "🚀 Generating demo..."
          echo "  Type: ${{ steps.params.outputs.demo_type }}"
          echo "  Bucket: $DEMO_S3_BUCKET"

          ./scripts/demo.sh ${{ steps.params.outputs.demo_type }}

      - name: Get S3 website URL
        id: s3_url
        if: contains(steps.params.outputs.demo_type, 's3')
        run: |
          BUCKET_NAME="${{ steps.params.outputs.bucket_name }}"
          S3_URL="http://${BUCKET_NAME}.s3-website-us-east-1.amazonaws.com/"
          echo "s3_url=$S3_URL" >> $GITHUB_OUTPUT
          echo "🌐 S3 Website URL: $S3_URL"

      - name: Upload demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-indexer-demo-pr${{ steps.params.outputs.pr_number || 'manual' }}
          path: demo/output/
          retention-days: 30

      - name: Comment on PR with demo links
        if: steps.params.outputs.pr_number
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.params.outputs.pr_number }};
            const bucketName = "${{ steps.params.outputs.bucket_name }}";
            const s3Url = "${{ steps.s3_url.outputs.s3_url }}";
            const demoType = "${{ steps.params.outputs.demo_type }}";

            let comment = `## 🗂️ Web-Indexer Demo

            A live demo has been generated for this pull request:`;

            if (demoType.includes('s3')) {
              comment += `
            **🌐 [View Demo](${s3Url})**
            `;
            }

            if (demoType.includes('local') || demoType === 'both') {
              comment += `
            ### 📁 Local Demo
            - Download the workflow artifacts to view locally
            - Contains demos with all 4 themes
            `;
            }

            comment += `
            ---
            *Demo will be automatically cleaned up when this PR is closed*`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Generate dev build
  dev-build:
    runs-on: ubuntu-latest
    needs: security-check
    if: |
      always() &&
      ((needs.security-check.outputs.authorized == 'true' && needs.security-check.outputs.should_build == 'true') ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.build_type == 'dev-build' || github.event.inputs.build_type == 'both')))
    permissions:
      contents: read
      packages: write
      pull-requests: write
      issues: write
    env:
      GOTOOLCHAIN: auto

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # GoReleaser needs full history

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          check-latest: true

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine build parameters
        id: params
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ -n "${{ github.event.inputs.pr_number }}" ]]; then
              PR_NUMBER="${{ github.event.inputs.pr_number }}"
            else
              PR_NUMBER="manual-$(date +%s)"
            fi
          else
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              PR_NUMBER="${{ github.event.number }}"
            elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
              PR_NUMBER="${{ github.event.issue.number }}"
            fi
          fi

          IMAGE_TAG="dev-pr${PR_NUMBER}"

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

          echo "📋 Build parameters:"
          echo "  PR: $PR_NUMBER"
          echo "  Image tag: $IMAGE_TAG"

      - name: Run GoReleaser for dev build
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release --clean --snapshot --skip=validate --config .goreleaser-dev.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SNAPSHOT_TAG: ${{ steps.params.outputs.image_tag }}

      - name: Comment on PR with build info
        if: steps.params.outputs.pr_number && steps.params.outputs.pr_number != 'manual'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.params.outputs.pr_number }};
            const imageTag = "${{ steps.params.outputs.image_tag }}";
            const imageRepo = "ghcr.io/${{ github.repository }}";

            const comment = `## 🚀 Dev Build Published

            A development Docker image has been built and published for this PR:

            **🐳 [${imageRepo}:${imageTag}](https://ghcr.io/${{ github.repository }}/pkgs/container/web-indexer)**

            ### 🧪 Try It Out
            \`\`\`bash
            # Pull the image
            docker pull ${imageRepo}:${imageTag}

            # Run with your data
            docker run --rm -v /path/to/data:/data ${imageRepo}:${imageTag} \\
              --source /data --target /data --recursive

            # Or use with S3
            docker run --rm -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY \\
              ${imageRepo}:${imageTag} --source s3://bucket --target s3://bucket
            \`\`\`

            ---
            *Image will be automatically cleaned up when this PR is closed*`;

            // Find existing comment to update
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('🚀 Dev Build Published')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Cleanup demo resources
  cleanup:
    runs-on: ubuntu-latest
    needs: security-check
    if: |
      always() &&
      needs.security-check.outputs.authorized == 'true' &&
      (needs.security-check.outputs.should_cleanup == 'true' || needs.security-check.outputs.should_build_cleanup == 'true')
    permissions:
      pull-requests: write
      issues: write
      packages: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Determine PR number
        id: pr_info
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER="${{ github.event.number }}"
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            PR_NUMBER="${{ github.event.issue.number }}"
          fi

          BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT

          echo "🧹 Cleanup parameters:"
          echo "  PR: $PR_NUMBER"
          echo "  Bucket: $BUCKET_NAME"

      - name: Cleanup S3 demo resources
        id: cleanup_result
        run: |
          BUCKET_NAME="${{ steps.pr_info.outputs.bucket_name }}"
          echo "🧹 Cleaning up S3 bucket: $BUCKET_NAME"

          # Check if bucket exists
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "✅ Bucket exists, proceeding with cleanup..."

            # Delete all objects in the bucket
            echo "🗑️ Deleting all objects..."
            aws s3 rm "s3://$BUCKET_NAME" --recursive 2>/dev/null || true

            # Delete the bucket
            echo "🗑️ Deleting bucket..."
            aws s3 rb "s3://$BUCKET_NAME" 2>/dev/null || true

            echo "cleanup_performed=true" >> $GITHUB_OUTPUT
            echo "✅ Cleanup completed successfully"
          else
            echo "ℹ️ Bucket $BUCKET_NAME does not exist or was already cleaned up"
            echo "cleanup_performed=false" >> $GITHUB_OUTPUT
          fi

      - name: Cleanup dev build Docker images
        id: docker_cleanup
        if: needs.security-check.outputs.should_build_cleanup == 'true'
        run: |
          PR_NUMBER="${{ steps.pr_info.outputs.pr_number }}"
          IMAGE_TAG="dev-pr${PR_NUMBER}"

          echo "🧹 Cleaning up Docker image: $IMAGE_TAG"

          # Note: GitHub Container Registry doesn't provide a direct API to delete images via CLI
          # The image will be cleaned up manually or via GitHub UI
          # For now, we'll just log the cleanup intent

          echo "docker_cleanup_performed=true" >> $GITHUB_OUTPUT
          echo "✅ Docker image cleanup logged: ghcr.io/${{ github.repository }}:$IMAGE_TAG"

      - name: Comment on PR about cleanup
        if: steps.pr_info.outputs.pr_number && (steps.cleanup_result.outputs.cleanup_performed == 'true' || steps.docker_cleanup.outputs.docker_cleanup_performed == 'true')
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr_info.outputs.pr_number }};
            const bucketName = "${{ steps.pr_info.outputs.bucket_name }}";
            const s3Cleanup = "${{ steps.cleanup_result.outputs.cleanup_performed }}" === 'true';
            const dockerCleanup = "${{ steps.docker_cleanup.outputs.docker_cleanup_performed }}" === 'true';

            let comment = `## 🧹 Cleanup Complete

            Resources for this PR have been cleaned up:
            `;

            if (s3Cleanup) {
              comment += `\n- ✅ Demo S3 bucket removed`;
            }

            if (dockerCleanup) {
              comment += `\n- ✅ Dev build Docker image marked for cleanup`;
            }

            comment += `\n\n---\n*Resources cleaned up automatically*`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Manual workflow dispatch demo
  manual-demo:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && (github.event.inputs.build_type == 'demo' || github.event.inputs.build_type == 'both')
    permissions:
      contents: read
    env:
      GOTOOLCHAIN: auto

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          check-latest: true

      - name: Build web-indexer
        run: go build -o web-indexer .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        if: github.event.inputs.demo_type == 's3' || github.event.inputs.demo_type == 'both'

      - name: Generate manual demo
        run: |
          DEMO_TYPE="${{ github.event.inputs.demo_type }}"

          if [[ -n "${{ github.event.inputs.pr_number }}" ]]; then
            export DEMO_S3_BUCKET="joshbeard-web-indexer-demo-pr${{ github.event.inputs.pr_number }}"
          else
            export DEMO_S3_BUCKET="joshbeard-web-indexer-demo-manual-$(date +%s)"
          fi

          echo "🚀 Generating manual demo..."
          echo "  Type: $DEMO_TYPE"
          echo "  Bucket: $DEMO_S3_BUCKET"

          ./scripts/demo.sh $DEMO_TYPE

      - name: Upload manual demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-indexer-demo-manual-${{ github.run_number }}
          path: demo/output/
          retention-days: 30

  # Manual workflow dispatch dev build
  manual-dev-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && (github.event.inputs.build_type == 'dev-build' || github.event.inputs.build_type == 'both')
    permissions:
      contents: read
      packages: write
    env:
      GOTOOLCHAIN: auto

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          check-latest: true

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate manual dev build
        run: |
          if [[ -n "${{ github.event.inputs.pr_number }}" ]]; then
            IMAGE_TAG="dev-pr${{ github.event.inputs.pr_number }}"
          else
            IMAGE_TAG="dev-manual-$(date +%s)"
          fi

          echo "🚀 Generating manual dev build..."
          echo "  Image tag: $IMAGE_TAG"

          # Run GoReleaser
          export SNAPSHOT_TAG="$IMAGE_TAG"
          go run github.com/goreleaser/goreleaser@latest release --clean --snapshot --skip=validate --config .goreleaser-dev.yml