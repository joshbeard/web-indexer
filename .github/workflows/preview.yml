name: "Web-Indexer Preview"

permissions:
  contents: read
  issues: write
  pull-requests: write

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number for manual preview generation'
        required: false
        type: string
      custom_args:
        description: 'Custom arguments to test'
        required: false
        type: string

jobs:
  parse-comment:
    name: "Parse Comment"
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' &&
        github.event.issue.pull_request != null &&
        startsWith(github.event.comment.body, '/preview')
    outputs:
      should_run: ${{ steps.parse.outputs.should_run }}
      custom_args: ${{ steps.parse.outputs.custom_args }}
      pr_number: ${{ steps.parse.outputs.pr_number }}
      cleanup_only: ${{ steps.parse.outputs.cleanup_only }}
      comment_user: ${{ steps.parse.outputs.comment_user }}

    steps:
      - name: Parse comment
        id: parse
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_USER: ${{ github.event.comment.user.login }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "üîç Parsing comment: $COMMENT_BODY"
          echo "üë§ Comment by: $COMMENT_USER"
          echo "üìã PR Number: $PR_NUMBER"

          # Parse command
          if [[ "$COMMENT_BODY" =~ ^/preview[[:space:]]*cleanup[[:space:]]*$ ]]; then
            echo "üßπ Cleanup command detected"
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "cleanup_only=true" >> $GITHUB_OUTPUT
            echo "custom_args=" >> $GITHUB_OUTPUT
          elif [[ "$COMMENT_BODY" =~ ^/preview[[:space:]]*(.*)$ ]]; then
            ARGS="${BASH_REMATCH[1]}"
            echo "üöÄ Preview command detected with args: '$ARGS'"
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "cleanup_only=false" >> $GITHUB_OUTPUT
            echo "custom_args=$ARGS" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Invalid command format"
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "cleanup_only=false" >> $GITHUB_OUTPUT
            echo "custom_args=" >> $GITHUB_OUTPUT
          fi

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "comment_user=$COMMENT_USER" >> $GITHUB_OUTPUT

  generate:
    name: "Generate Web-Indexer Preview"
    runs-on: ubuntu-latest
    needs: parse-comment
    if: needs.parse-comment.outputs.should_run == 'true'
    environment:
      name: preview-pr
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    env:
      GOTOOLCHAIN: auto
      CUSTOM_ARGS: ${{ needs.parse-comment.outputs.custom_args }}
      PR_NUMBER: ${{ needs.parse-comment.outputs.pr_number }}
      COMMENT_USER: ${{ needs.parse-comment.outputs.comment_user }}
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_RUN_ID: ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show preview request details
        run: |
          echo "üóÇÔ∏è WEB-INDEXER PREVIEW APPROVED"
          echo "üë§ Requested by: $COMMENT_USER"
          echo "üìã PR Number: $PR_NUMBER"
          echo "‚öôÔ∏è  Arguments: $CUSTOM_ARGS"
          echo "üîí Approved by: ${{ github.actor }}"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          check-latest: true

      - name: Build web-indexer
        run: go build -o web-indexer .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Determine demo parameters
        id: params
        run: |
          BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"
          S3_URL="http://${BUCKET_NAME}.s3-website-us-east-1.amazonaws.com/"

          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "s3_url=$S3_URL" >> $GITHUB_OUTPUT

          echo "üìã Preview parameters:"
          echo "  Bucket: $BUCKET_NAME"
          echo "  URL: $S3_URL"
          echo "  Custom args: $CUSTOM_ARGS"

      - name: Generate web-indexer demo
        env:
          DEMO_S3_BUCKET: ${{ steps.params.outputs.bucket_name }}
        run: |
          echo "üöÄ Generating web-indexer preview..."
          echo "  Bucket: $DEMO_S3_BUCKET"
          echo "  Custom args: $CUSTOM_ARGS"

          cd demo

          if [[ -n "$CUSTOM_ARGS" ]]; then
            echo "üéØ Generating config-based demos PLUS custom demo with args: $CUSTOM_ARGS"
            make demo-s3 CUSTOM_DEMOS="$CUSTOM_ARGS"
          else
            echo "üéØ Generating all config-based demos (themes)"
            make demo-s3
          fi

      - name: Upload demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-indexer-demo-pr-${{ env.PR_NUMBER }}
          path: demo/output/
          retention-days: 30

      - name: Comment on PR with preview links
        if: success()
        uses: actions/github-script@v7
        env:
          S3_URL: ${{ steps.params.outputs.s3_url }}
          BUCKET_NAME: ${{ steps.params.outputs.bucket_name }}
        with:
          script: |
            const prNumber = ${{ env.PR_NUMBER }};
            const bucketName = process.env.BUCKET_NAME;
            const s3Url = process.env.S3_URL;
            const customArgs = process.env.CUSTOM_ARGS || '';

            let comment = `## üóÇÔ∏è Web-Indexer Preview

            A live demo has been generated for this pull request:

            **üåê [Preview on S3](${s3Url})**

            ### üéØ Demo Configuration`;

            if (customArgs.trim()) {
              comment += `
            - **Type**: Custom demo (additional)
            - **Arguments**: \`${customArgs}\`
            - **Generated with**: \`web-indexer ${customArgs}\`
            - **Note**: This is generated *in addition* to all config-based theme demos
            `;
            } else {
              comment += `
            - **Type**: All themes showcase
            - **Themes**: Default, Solarized, Nord, Dracula
            - **Features**: Recursive indexing, responsive design, dark mode
            `;
            }

            comment += `

            ### üß™ Available Commands
            - \`/preview\` - Generate all themes demo
            - \`/preview <args>\` - Generate custom demo *in addition* to themes
            - \`/preview cleanup\` - Clean up resources

            ### üìñ Example Custom Commands
            - \`/preview --theme nord --title "My Custom Index"\`
            - \`/preview --theme dracula --minify --sort-by last_modified\`

            ---
            *Preview will be automatically cleaned up when this PR is closed*`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  auto-cleanup:
    name: "Auto Cleanup on PR Close/Merge"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    environment: preview-pr

    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      PR_MERGED: ${{ github.event.pull_request.merged }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_RUN_ID: ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Show auto cleanup details
        run: |
          echo "üßπ AUTO CLEANUP TRIGGERED"
          echo "üìã PR Number: $PR_NUMBER"
          echo "üéØ Trigger: PR ${{ github.event.action }}"
          echo "üîÄ Merged: $PR_MERGED"

      - name: Perform cleanup
        id: cleanup
        run: |
          BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"
          echo "üßπ Auto-cleaning up preview environment for PR #$PR_NUMBER"
          echo "   S3 Bucket: $BUCKET_NAME"

          # Check if bucket exists
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "‚úÖ Bucket exists, proceeding with cleanup..."

            # Delete all objects in the bucket
            echo "üóëÔ∏è Deleting all objects..."
            aws s3 rm "s3://$BUCKET_NAME" --recursive 2>/dev/null || true

            # Delete the bucket
            echo "üóëÔ∏è Deleting bucket..."
            aws s3 rb "s3://$BUCKET_NAME" 2>/dev/null || true

            echo "cleanup_performed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Auto cleanup completed"
          else
            echo "‚ÑπÔ∏è Bucket $BUCKET_NAME does not exist or was already cleaned up"
            echo "cleanup_performed=false" >> $GITHUB_OUTPUT
          fi

          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Comment on PR about cleanup
        if: steps.cleanup.outputs.cleanup_performed == 'true'
        uses: actions/github-script@v7
        env:
          BUCKET_NAME: ${{ steps.cleanup.outputs.bucket_name }}
        with:
          script: |
            const prNumber = ${{ env.PR_NUMBER }};
            const bucketName = process.env.BUCKET_NAME;
            const wasMerged = ${{ env.PR_MERGED }};

            const comment = `## üßπ Web-Indexer Preview Cleanup

            **Trigger:** PR ${wasMerged ? 'merged' : 'closed'}
            **Status:** ‚úÖ Preview environment automatically cleaned up

            üéâ **Cleanup Complete!**
            - **S3 Bucket:** \`${bucketName}\` (removed)
            - **Preview URL:** No longer accessible

            **Auto-cleanup verified:**
            ‚úÖ S3 bucket and all objects removed
            ‚úÖ Preview environment resources cleaned up
            ‚úÖ Temporary artifacts removed

            ---
            *Cleanup completed automatically on PR ${wasMerged ? 'merge' : 'close'}*`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  manual-cleanup:
    name: "Manual Cleanup (Command)"
    runs-on: ubuntu-latest
    if: needs.parse-comment.outputs.cleanup_only == 'true'
    needs: [parse-comment]
    environment: preview-pr

    env:
      PR_NUMBER: ${{ needs.parse-comment.outputs.pr_number }}
      COMMENT_USER: ${{ needs.parse-comment.outputs.comment_user }}
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_RUN_ID: ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Show cleanup request details
        run: |
          echo "üßπ CLEANUP REQUEST APPROVED"
          echo "üë§ Requested by: $COMMENT_USER"
          echo "üìã PR Number: $PR_NUMBER"
          echo "üîí Approved by: ${{ github.actor }}"

      - name: Perform cleanup
        id: cleanup
        run: |
          BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"
          echo "üßπ Manual cleanup for PR #$PR_NUMBER"
          echo "   S3 Bucket: $BUCKET_NAME"

          # Check if bucket exists
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "‚úÖ Bucket exists, proceeding with cleanup..."

            # Delete all objects in the bucket
            echo "üóëÔ∏è Deleting all objects..."
            aws s3 rm "s3://$BUCKET_NAME" --recursive 2>/dev/null || true

            # Delete the bucket
            echo "üóëÔ∏è Deleting bucket..."
            aws s3 rb "s3://$BUCKET_NAME" 2>/dev/null || true

            echo "‚úÖ Manual cleanup completed"
          else
            echo "‚ÑπÔ∏è Bucket $BUCKET_NAME does not exist or was already cleaned up"
          fi

          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Comment on manual cleanup result
        if: always()
        uses: actions/github-script@v7
        env:
          BUCKET_NAME: ${{ steps.cleanup.outputs.bucket_name }}
        with:
          script: |
            const prNumber = ${{ env.PR_NUMBER }};
            const bucketName = process.env.BUCKET_NAME;
            const jobStatus = '${{ job.status }}';
            const success = jobStatus === 'success';

            const comment = `## üßπ Manual Cleanup ${success ? 'Complete' : 'Failed'}

            **Requested by:** @${{ env.COMMENT_USER }}
            **Status:** ${success ? '‚úÖ' : '‚ùå'} Manual cleanup ${success ? 'completed' : 'failed'}

            ${success ? 'üéâ **Cleanup Complete!**' : 'üö® **Cleanup Error**'}
            - **S3 Bucket:** \`${bucketName}\` ${success ? '(removed)' : '(check logs for details)'}
            ${success ? '- **Preview URL:** No longer accessible' : '- **Error:** Check workflow logs for details'}

            ${success ? `**Cleanup verified:**
            ‚úÖ S3 bucket and all objects removed
            ‚úÖ Preview environment resources cleaned up` : ''}

            ---
            *Manual cleanup ${success ? 'completed successfully' : 'failed - check logs for details'}*`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  manual-test:
    name: "Manual Test"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: preview-pr

    env:
      GOTOOLCHAIN: auto

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          check-latest: true

      - name: Build web-indexer
        run: go build -o web-indexer .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run manual test
        env:
          DEMO_S3_BUCKET: joshbeard-web-indexer-demo-manual-${{ github.run_id }}
        run: |
          echo "üéÆ Manual web-indexer preview test"
          echo "PR: ${{ github.event.inputs.pr_number || 'manual' }}"
          echo "Args: ${{ github.event.inputs.custom_args || 'none' }}"
          echo "Bucket: $DEMO_S3_BUCKET"

          cd demo

          args="${{ github.event.inputs.custom_args }}"
          if [[ -n "$args" ]]; then
            make demo-s3 CUSTOM_DEMOS="$args"
          else
            make demo-s3
          fi

      - name: Upload manual test results
        uses: actions/upload-artifact@v4
        with:
          name: web-indexer-manual-test-${{ github.event.inputs.pr_number || github.run_id }}
          path: demo/output/
          retention-days: 7