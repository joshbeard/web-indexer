name: "Generate Demo"

on:
  pull_request:
    types: [opened, synchronize, closed, labeled, unlabeled]
    branches:
      - main
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      demo_type:
        description: 'Demo type to generate'
        required: true
        default: 'both'
        type: choice
        options:
        - local
        - s3
        - both
      pr_number:
        description: 'PR number (for manual S3 demo generation)'
        required: false
        type: string

jobs:
  # Security check - only allow authorized users
  security-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'issue_comment'
    outputs:
      authorized: ${{ steps.check.outputs.authorized }}
      should_generate: ${{ steps.check.outputs.should_generate }}
      should_cleanup: ${{ steps.check.outputs.should_cleanup }}
    steps:
      - name: Check authorization and trigger conditions
        id: check
        run: |
          # Define authorized users (repository owner and collaborators)
          AUTHORIZED_USERS="joshbeard"  # Add more users separated by spaces

          # Check if user is authorized
          if echo "$AUTHORIZED_USERS" | grep -q "${{ github.actor }}"; then
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "authorized=false" >> $GITHUB_OUTPUT
            echo "❌ User ${{ github.actor }} is not authorized to generate demos"
            exit 0
          fi

          # Check trigger conditions
          should_generate=false
          should_cleanup=false

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Check for demo label or if PR is opened/synchronized
            if [[ "${{ github.event.action }}" == "labeled" && "${{ github.event.label.name }}" == "demo" ]]; then
              should_generate=true
            elif [[ "${{ github.event.action }}" == "unlabeled" && "${{ github.event.label.name }}" == "demo" ]]; then
              should_cleanup=true
            elif [[ "${{ github.event.action }}" == "closed" ]]; then
              should_cleanup=true
            fi
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            # Check for demo commands in comments
            comment_body="${{ github.event.comment.body }}"
            if [[ "$comment_body" =~ ^/demo[[:space:]]*$ ]]; then
              should_generate=true
            elif [[ "$comment_body" =~ ^/demo[[:space:]]+cleanup[[:space:]]*$ ]]; then
              should_cleanup=true
            fi
          fi

          echo "should_generate=$should_generate" >> $GITHUB_OUTPUT
          echo "should_cleanup=$should_cleanup" >> $GITHUB_OUTPUT

          echo "🔍 Authorization check:"
          echo "  User: ${{ github.actor }}"
          echo "  Authorized: $(echo "$AUTHORIZED_USERS" | grep -q "${{ github.actor }}" && echo "✅ Yes" || echo "❌ No")"
          echo "  Should generate: $should_generate"
          echo "  Should cleanup: $should_cleanup"

  # Generate demo
  demo:
    runs-on: ubuntu-latest
    needs: security-check
    if: |
      always() &&
      (needs.security-check.outputs.authorized == 'true' && needs.security-check.outputs.should_generate == 'true') ||
      github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      pull-requests: write
      issues: write
    env:
      GOTOOLCHAIN: auto

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          check-latest: true

      - name: Build web-indexer
        run: go build -o web-indexer .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Determine demo parameters
        id: params
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            DEMO_TYPE="${{ github.event.inputs.demo_type }}"
            if [[ -n "${{ github.event.inputs.pr_number }}" ]]; then
              PR_NUMBER="${{ github.event.inputs.pr_number }}"
              BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"
            else
              BUCKET_NAME="joshbeard-web-indexer-demo-manual-$(date +%s)"
            fi
          else
            DEMO_TYPE="s3"  # Only S3 demos for PR triggers
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              PR_NUMBER="${{ github.event.number }}"
            elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
              PR_NUMBER="${{ github.event.issue.number }}"
            fi
            BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"
          fi

          echo "demo_type=$DEMO_TYPE" >> $GITHUB_OUTPUT
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

          echo "📋 Demo parameters:"
          echo "  Type: $DEMO_TYPE"
          echo "  Bucket: $BUCKET_NAME"
          echo "  PR: $PR_NUMBER"

      - name: Generate demo
        env:
          DEMO_S3_BUCKET: ${{ steps.params.outputs.bucket_name }}
        run: |
          echo "🚀 Generating demo..."
          echo "  Type: ${{ steps.params.outputs.demo_type }}"
          echo "  Bucket: $DEMO_S3_BUCKET"

          ./scripts/demo.sh ${{ steps.params.outputs.demo_type }}

      - name: Get S3 website URL
        id: s3_url
        if: contains(steps.params.outputs.demo_type, 's3')
        run: |
          BUCKET_NAME="${{ steps.params.outputs.bucket_name }}"
          S3_URL="http://${BUCKET_NAME}.s3-website-us-east-1.amazonaws.com/"
          echo "s3_url=$S3_URL" >> $GITHUB_OUTPUT
          echo "🌐 S3 Website URL: $S3_URL"

      - name: Upload demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-indexer-demo-pr${{ steps.params.outputs.pr_number || 'manual' }}
          path: demo/output/
          retention-days: 30

      - name: Comment on PR with demo links
        if: steps.params.outputs.pr_number
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.params.outputs.pr_number }};
            const bucketName = "${{ steps.params.outputs.bucket_name }}";
            const s3Url = "${{ steps.s3_url.outputs.s3_url }}";
            const demoType = "${{ steps.params.outputs.demo_type }}";

            let comment = `## 🗂️ Web-Indexer Demo Generated!

            Your demo has been successfully created for PR #${prNumber}:
            `;

            if (demoType.includes('s3')) {
              comment += `
            ### ☁️ Live S3 Demo
            - **🌐 Demo URL**: [${s3Url}](${s3Url})
            - **📦 Bucket**: \`${bucketName}\`
            - **🎨 Themes**: All 4 themes available (default, solarized, nord, dracula)
            - **📱 Features**: Responsive design with automatic dark mode
            `;
            }

            if (demoType.includes('local') || demoType === 'both') {
              comment += `
            ### 📁 Local Demo
            - Download the workflow artifacts to view locally
            - Contains demos with all 4 themes
            `;
            }

            comment += `
            ### 🧪 Testing the Demo

            **Browse the live demo:**
            - Visit the main demo page to see theme comparisons
            - Test responsive design by resizing your browser
            - Try dark/light mode switching in your OS settings

            **Test with your own data:**
            \`\`\`bash
            # Generate a demo locally
            ./scripts/demo.sh both --serve

            # Or test with the same S3 bucket
            export DEMO_S3_BUCKET="${bucketName}"
            ./scripts/demo.sh s3
            \`\`\`

            ### 🧹 Cleanup
            - The S3 resources will be **automatically cleaned up** when this PR is closed/merged
            - To cleanup manually, comment: \`/demo cleanup\`
            - Or remove the \`demo\` label if present

            ### 🎯 Commands
            - \`/demo\` - Regenerate the demo
            - \`/demo cleanup\` - Clean up S3 resources
            - Add \`demo\` label - Generate demo
            - Remove \`demo\` label - Clean up demo

            ---
            *Demo generated by @${{ github.actor }} • Bucket: \`${bucketName}\`*`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Cleanup demo resources
  cleanup:
    runs-on: ubuntu-latest
    needs: security-check
    if: |
      always() &&
      needs.security-check.outputs.authorized == 'true' &&
      needs.security-check.outputs.should_cleanup == 'true'
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Determine PR number
        id: pr_info
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER="${{ github.event.number }}"
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            PR_NUMBER="${{ github.event.issue.number }}"
          fi

          BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT

          echo "🧹 Cleanup parameters:"
          echo "  PR: $PR_NUMBER"
          echo "  Bucket: $BUCKET_NAME"

      - name: Cleanup S3 demo resources
        id: cleanup_result
        run: |
          BUCKET_NAME="${{ steps.pr_info.outputs.bucket_name }}"
          echo "🧹 Cleaning up S3 bucket: $BUCKET_NAME"

          # Check if bucket exists
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "✅ Bucket exists, proceeding with cleanup..."

            # Delete all objects in the bucket
            echo "🗑️ Deleting all objects..."
            aws s3 rm "s3://$BUCKET_NAME" --recursive 2>/dev/null || true

            # Delete the bucket
            echo "🗑️ Deleting bucket..."
            aws s3 rb "s3://$BUCKET_NAME" 2>/dev/null || true

            echo "cleanup_performed=true" >> $GITHUB_OUTPUT
            echo "✅ Cleanup completed successfully"
          else
            echo "ℹ️ Bucket $BUCKET_NAME does not exist or was already cleaned up"
            echo "cleanup_performed=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR about cleanup
        if: steps.pr_info.outputs.pr_number && steps.cleanup_result.outputs.cleanup_performed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr_info.outputs.pr_number }};
            const bucketName = "${{ steps.pr_info.outputs.bucket_name }}";

            const comment = `## 🧹 Demo Cleanup Complete

            The S3 demo resources for PR #${prNumber} have been successfully cleaned up:

            - **🗑️ Bucket Deleted**: \`${bucketName}\`
            - **💰 Cost**: No ongoing S3 storage costs
            - **🔒 Security**: All demo data removed

            To generate a new demo, use:
            - Comment: \`/demo\`
            - Add the \`demo\` label

            ---
            *Cleanup performed by @${{ github.actor }}*`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Manual workflow dispatch demo
  manual-demo:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
    env:
      GOTOOLCHAIN: auto

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          check-latest: true

      - name: Build web-indexer
        run: go build -o web-indexer .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        if: github.event.inputs.demo_type == 's3' || github.event.inputs.demo_type == 'both'

      - name: Generate manual demo
        run: |
          DEMO_TYPE="${{ github.event.inputs.demo_type }}"

          if [[ -n "${{ github.event.inputs.pr_number }}" ]]; then
            export DEMO_S3_BUCKET="joshbeard-web-indexer-demo-pr${{ github.event.inputs.pr_number }}"
          else
            export DEMO_S3_BUCKET="joshbeard-web-indexer-demo-manual-$(date +%s)"
          fi

          echo "🚀 Generating manual demo..."
          echo "  Type: $DEMO_TYPE"
          echo "  Bucket: $DEMO_S3_BUCKET"

          ./scripts/demo.sh $DEMO_TYPE

      - name: Upload manual demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-indexer-demo-manual-${{ github.run_number }}
          path: demo/output/
          retention-days: 30