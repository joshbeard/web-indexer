name: "Web-Indexer Preview"

permissions:
  contents: read
  issues: write
  pull-requests: write

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number for manual preview generation'
        required: false
        type: string
      custom_args:
        description: 'Custom arguments to test'
        required: false
        type: string

jobs:
  parse-comment:
    name: "Parse Comment"
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' &&
        github.event.issue.pull_request != null &&
        startsWith(github.event.comment.body, '/preview')
    outputs:
      should_run: ${{ steps.parse.outputs.should_run }}
      custom_args: ${{ steps.parse.outputs.custom_args }}
      pr_number: ${{ steps.parse.outputs.pr_number }}
      cleanup_only: ${{ steps.parse.outputs.cleanup_only }}
      comment_user: ${{ steps.parse.outputs.comment_user }}
      status_comment_id: ${{ steps.create-comment.outputs.result }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse comment
        id: parse
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_USER: ${{ github.event.comment.user.login }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "🔍 Parsing comment: $COMMENT_BODY"
          echo "👤 Comment by: $COMMENT_USER"
          echo "📋 PR Number: $PR_NUMBER"

          # Parse command
          if [[ "$COMMENT_BODY" =~ ^/preview[[:space:]]*cleanup[[:space:]]*$ ]]; then
            echo "🧹 Cleanup command detected"
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "cleanup_only=true" >> $GITHUB_OUTPUT
            echo "custom_args=" >> $GITHUB_OUTPUT
          elif [[ "$COMMENT_BODY" =~ ^/preview[[:space:]]*(.*)$ ]]; then
            ARGS="${BASH_REMATCH[1]}"
            echo "🚀 Preview command detected with args: '$ARGS'"
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "cleanup_only=false" >> $GITHUB_OUTPUT
            echo "custom_args=$ARGS" >> $GITHUB_OUTPUT
          else
            echo "❌ Invalid command format"
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "cleanup_only=false" >> $GITHUB_OUTPUT
            echo "custom_args=" >> $GITHUB_OUTPUT
          fi

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "comment_user=$COMMENT_USER" >> $GITHUB_OUTPUT

      - name: Create initial status comment
        id: create-comment
        if: steps.parse.outputs.should_run == 'true' || steps.parse.outputs.cleanup_only == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { handleInitialComment } = require('./.github/workflows/preview-automation/workflow-actions.js');
            return await handleInitialComment(github, context, core, ${{ toJSON(steps.parse.outputs) }});

      - name: Update comment for pending approval
        if: steps.parse.outputs.should_run == 'true' || steps.parse.outputs.cleanup_only == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { handlePendingApproval } = require('./.github/workflows/preview-automation/workflow-actions.js');
            await handlePendingApproval(github, context, ${{ steps.create-comment.outputs.result }}, ${{ toJSON(steps.parse.outputs) }});

  generate:
    name: "Generate Web-Indexer Preview"
    runs-on: ubuntu-latest
    needs: parse-comment
    if: needs.parse-comment.outputs.should_run == 'true'
    environment:
      name: preview-pr
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    env:
      GOTOOLCHAIN: auto
      CUSTOM_ARGS: ${{ needs.parse-comment.outputs.custom_args }}
      PR_NUMBER: ${{ needs.parse-comment.outputs.pr_number }}
      COMMENT_USER: ${{ needs.parse-comment.outputs.comment_user }}
      STATUS_COMMENT_ID: ${{ needs.parse-comment.outputs.status_comment_id }}
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_RUN_ID: ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update comment - preview starting
        uses: actions/github-script@v7
        with:
          script: |
            const { handlePreviewStarting } = require('./.github/workflows/preview-automation/workflow-actions.js');
            await handlePreviewStarting(github, context, process.env);

      - name: Show preview request details
        run: |
          echo "🗂️ WEB-INDEXER PREVIEW APPROVED"
          echo "👤 Requested by: $COMMENT_USER"
          echo "📋 PR Number: $PR_NUMBER"
          echo "⚙️  Arguments: $CUSTOM_ARGS"
          echo "🔒 Approved by: ${{ github.actor }}"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          check-latest: true

      - name: Build web-indexer
        run: go build -o web-indexer .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Determine demo parameters
        id: params
        run: |
          BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"
          # Use custom domain URL instead of direct S3 website URL
          PREVIEW_URL="https://web-indexer.jbeard.dev/pr/${PR_NUMBER}/"

          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "s3_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

          echo "📋 Preview parameters:"
          echo "  Bucket: $BUCKET_NAME"
          echo "  URL: $PREVIEW_URL"
          echo "  Custom args: $CUSTOM_ARGS"

      - name: Generate web-indexer demo
        env:
          DEMO_S3_BUCKET: ${{ steps.params.outputs.bucket_name }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
          GITHUB_REPOSITORY: ${{ env.GITHUB_REPOSITORY }}
          CUSTOM_ARGS: ${{ env.CUSTOM_ARGS }}
        run: |
          echo "🚀 Generating web-indexer preview..."
          echo "  Bucket: $DEMO_S3_BUCKET"
          echo "  PR Number: $PR_NUMBER"
          echo "  Repository: $GITHUB_REPOSITORY"
          echo "  Custom args: $CUSTOM_ARGS"

          cd demo

          if [[ -n "$CUSTOM_ARGS" ]]; then
            echo "🎯 Generating config-based demos PLUS custom demo with args: $CUSTOM_ARGS"
            go run demo.go -type s3 -custom-demos "$CUSTOM_ARGS"
          else
            echo "🎯 Generating all config-based demos (themes)"
            go run demo.go -type s3
          fi

      - name: Upload demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-indexer-demo-pr-${{ env.PR_NUMBER }}
          path: demo/output/
          retention-days: 30

      - name: Update comment - preview success
        if: success()
        env:
          S3_URL: ${{ steps.params.outputs.s3_url }}
          BUCKET_NAME: ${{ steps.params.outputs.bucket_name }}
        uses: actions/github-script@v7
        with:
          script: |
            const { handlePreviewSuccess } = require('./.github/workflows/preview-automation/workflow-actions.js');
            await handlePreviewSuccess(github, context, process.env);

      - name: Update comment - preview failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { handlePreviewFailure } = require('./.github/workflows/preview-automation/workflow-actions.js');
            await handlePreviewFailure(github, context, process.env);

  auto-cleanup:
    name: "Auto Cleanup on PR Close/Merge"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    environment: preview-pr

    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      PR_MERGED: ${{ github.event.pull_request.merged }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_RUN_ID: ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Show auto cleanup details
        run: |
          echo "🧹 AUTO CLEANUP TRIGGERED"
          echo "📋 PR Number: $PR_NUMBER"
          echo "🎯 Trigger: PR ${{ github.event.action }}"
          echo "🔀 Merged: $PR_MERGED"

      - name: Perform cleanup
        id: cleanup
        run: |
          BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"
          echo "🧹 Auto-cleaning up preview environment for PR #$PR_NUMBER"
          echo "   S3 Bucket: $BUCKET_NAME"

          # Use the demo's built-in cleanup system
          echo "🧹 Running demo cleanup (includes S3 bucket tracking)..."
          cd demo

          # Set the bucket name in environment for cleanup to find it
          export DEMO_S3_BUCKET="$BUCKET_NAME"

          if go run demo.go -cleanup; then
            echo "cleanup_performed=true" >> $GITHUB_OUTPUT
            echo "✅ Auto cleanup completed"
          else
            echo "⚠️ Demo cleanup had issues, but continuing..."
            echo "cleanup_performed=false" >> $GITHUB_OUTPUT
          fi

          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Comment on PR about cleanup
        if: steps.cleanup.outputs.cleanup_performed == 'true'
        uses: actions/github-script@v7
        env:
          BUCKET_NAME: ${{ steps.cleanup.outputs.bucket_name }}
        with:
          script: |
            const prNumber = ${{ env.PR_NUMBER }};
            const bucketName = process.env.BUCKET_NAME;

            const comment = `✅ Preview environment cleaned up`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  manual-cleanup:
    name: "Manual Cleanup (Command)"
    runs-on: ubuntu-latest
    if: needs.parse-comment.outputs.cleanup_only == 'true'
    needs: [parse-comment]
    environment: preview-pr

    env:
      PR_NUMBER: ${{ needs.parse-comment.outputs.pr_number }}
      COMMENT_USER: ${{ needs.parse-comment.outputs.comment_user }}
      STATUS_COMMENT_ID: ${{ needs.parse-comment.outputs.status_comment_id }}
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_RUN_ID: ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update comment - cleanup starting
        uses: actions/github-script@v7
        with:
          script: |
            const { handleCleanupStarting } = require('./.github/workflows/preview-automation/workflow-actions.js');
            await handleCleanupStarting(github, context, process.env);

      - name: Show cleanup request details
        run: |
          echo "🧹 CLEANUP REQUEST APPROVED"
          echo "👤 Requested by: $COMMENT_USER"
          echo "📋 PR Number: $PR_NUMBER"
          echo "🔒 Approved by: ${{ github.actor }}"

      - name: Perform cleanup
        id: cleanup
        run: |
          BUCKET_NAME="joshbeard-web-indexer-demo-pr${PR_NUMBER}"
          echo "🧹 Manual cleanup for PR #$PR_NUMBER"
          echo "   S3 Bucket: $BUCKET_NAME"

          # Use the demo's built-in cleanup system
          echo "🧹 Running demo cleanup (includes S3 bucket tracking)..."
          cd demo

          # Set the bucket name in environment for cleanup to find it
          export DEMO_S3_BUCKET="$BUCKET_NAME"

          if go run demo.go -cleanup; then
            echo "✅ Manual cleanup completed"
          else
            echo "⚠️ Demo cleanup had issues, but continuing..."
          fi

          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Update comment - cleanup result
        if: always()
        env:
          BUCKET_NAME: ${{ steps.cleanup.outputs.bucket_name }}
        uses: actions/github-script@v7
        with:
          script: |
            const { handleCleanupResult } = require('./.github/workflows/preview-automation/workflow-actions.js');
            await handleCleanupResult(github, context, process.env, '${{ job.status }}');

  manual-test:
    name: "Manual Test"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: preview-pr

    env:
      GOTOOLCHAIN: auto

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          check-latest: true

      - name: Build web-indexer
        run: go build -o web-indexer .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run manual test
        env:
          DEMO_S3_BUCKET: joshbeard-web-indexer-demo-manual-${{ github.run_id }}
        run: |
          echo "🎮 Manual web-indexer preview test"
          echo "PR: ${{ github.event.inputs.pr_number || 'manual' }}"
          echo "Args: ${{ github.event.inputs.custom_args || 'none' }}"
          echo "Bucket: $DEMO_S3_BUCKET"

          cd demo

          args="${{ github.event.inputs.custom_args }}"
          if [[ -n "$args" ]]; then
            go run demo.go -type s3 -custom-demos "$args"
          else
            go run demo.go -type s3
          fi

      - name: Upload manual test results
        uses: actions/upload-artifact@v4
        with:
          name: web-indexer-manual-test-${{ github.event.inputs.pr_number || github.run_id }}
          path: demo/output/
          retention-days: 7